[
{
	"uri": "https://parnold-x.github.io/docTest/about/",
	"title": "About DC43",
	"tags": [],
	"description": "DC43 is an leading design automation framework. which enables you to model applications and services and automate their entire life cycle",
	"content": " What Is DC43?  DC43 is an leading engineering automation framework DC43 allows organizations an effortless transition to public cloud and Cloud-Native architecture by enabling them to automate their existing infrastructure alongside cloud native and distributed edge resources. DC43 also allows users to manage different orchestration and automation domains as part of one common CI/CD pipeline. Key Features Everything as a Code   How this Document is Organized The documentation center has been designed to assist you to easily navigate to the information that you require. Documentation for DC43 Core Products: A table of contents for the entire Documentation Center appears on the left of all pages in the site. You can use the table of contents to drill down into a document to the content that you require.\n  "
},
{
	"uri": "https://parnold-x.github.io/docTest/atest/",
	"title": "A Test",
	"tags": [],
	"description": "this is a test",
	"content": " AsciiDoc Code Code Test class Hello { public void test() { System.out.println(\u0026#34;Hello\u0026#34;); } } op test(a:String) : String { G+[(n1:|ClassA)] (1) } class Hello { public void test() { System.out.println(\u0026#34;Hello\u0026#34;); } } 1 The [Create] part is defined inside the G+[] statement.   AsciiDoc Test The Dangers of Wolpertingers Don’t worry about gumberoos or splintercats. Something far more fearsome plagues the days, nights, and inbetweens. Wolpertingers. Origins Wolpertingers are ravenous beasts. DC43 is a free online AsciiDoc editor. Just type AsciiDoc source text into the left pane, …​and the live preview appears in the right pane! What’s AsciiDoc? Link to about AsciiDoc is a human-readable text document format for writing notes, documentation, articles, books, ebooks, slideshows, web pages, man pages and blogs, and more.\n  AsciiDoc SmokeTest Dan Allen \u0026lt;thedoc@asciidoctor.org\u0026gt; emoji :plus: :spade: html + This is a demonstration of asciidoctor-ruby. And this is the preamble of this document. Purpose This document exercises many of the features of AsciiDoc to test the asciidoctor-ruby implementation. If you want the output to look familiar, copy (or link) the AsciiDoc stylesheet, asciidoc.css, to the output directory.\n   Optional Title This is an example single-paragraph note. Optional Title This is an example single-paragraph note. Tip. Important. Warning. Caution. Optional Title *Listing* Block Use: code or file listings Optional Title Sidebar Block\n  "
},
{
	"uri": "https://parnold-x.github.io/docTest/doc/",
	"title": "Doc",
	"tags": [],
	"description": "This is a category with the classes",
	"content": " Classes Language Specification Basics A classes package is specified in a .classes file. A package has a name and contains classes, interfaces, enums, and datatypes. Package The package is defined at the beginning of the file with the following package test.hello The name is somehow important because it defines the namespace of all containing elements. For this package a Class ClassA would have the full qualified name test.\n  "
},
{
	"uri": "https://parnold-x.github.io/docTest/atest/code/",
	"title": "AsciiDoc Code",
	"tags": [],
	"description": "",
	"content": "Code Test class Hello { public void test() { System.out.println(\u0026#34;Hello\u0026#34;); } }   op test(a:String) : String { G+[(n1:|ClassA)] (1) } class Hello { public void test() { System.out.println(\u0026#34;Hello\u0026#34;); } }     1 The [Create] part is defined inside the G+[] statement.      "
},
{
	"uri": "https://parnold-x.github.io/docTest/atest/example_adoc/",
	"title": "AsciiDoc Test",
	"tags": [],
	"description": "",
	"content": "The Dangers of Wolpertingers Don’t worry about gumberoos or splintercats. Something far more fearsome plagues the days, nights, and inbetweens. Wolpertingers.\n   Origins Wolpertingers are ravenous beasts.\n DC43 is a free online AsciiDoc editor.\n   Just type AsciiDoc source text into the left pane,\n  …​and the live preview appears in the right pane!\n   What’s AsciiDoc? Link to about\n AsciiDoc is a human-readable text document format for writing notes, documentation, articles, books, ebooks, slideshows, web pages, man pages and blogs, and more. AsciiDoc files can be translated to many formats including HTML, PDF, EPUB, and man page.\n To learn more, visit the AsciiDoc home page at http://www.methods.co.nz/asciidoc/.\n  About AsciiDocLIVE AsciiDocLIVE is currently in beta stage. This means there are likely a lot of bugs, and even more ways to make it better.\n If you have any questions, suggestions or other feedback, please feel free to create an issue on  GitHub. Hope to hear from you soon!\n  AsciiDoc Mini Cheat Sheet To help you get started, here’re some snippets from the AsciiDoc Cheet Sheet. Feel free to poke around :)\n Text Styles   normal, italic, bold, mono.\n  ``double quoted\u0026#39;\u0026#39;, `single quoted\u0026#39;.\n  normal, super, sub.\n  passthru bold\n    Tables Table 1. An example table     Col 1 Col 2 Col 3     1\n Item 1\n a\n   2\n Item 2\n b\n   3\n Item 3\n c\n     6\n Three items\n d\n     Lists   Q: How did the programmer die in the shower? A: He read the shampoo instructions:\n Lather, rinse.\n  Repeat.\n     There are only 10 kinds of people in this world:\n  Those who understand binary.\n  Those who don’t.\n       Misc   Code listings:\n#!/usr/bin/env python import antigravity try: antigravity.fly() except FlytimeError as e: # um...not sure what to do now. pass     Quotes:\n It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness…​  — Charles Dickens A Tale of Two Cities     Links:\n  AsciiDocLIVE is awesome!\n     Images:\n\n   Videos:\n     Pass-through: pass through content\n       "
},
{
	"uri": "https://parnold-x.github.io/docTest/doc/classes/",
	"title": "Classes Language Specification",
	"tags": [],
	"description": "",
	"content": "Basics A classes package is specified in a  .classes file. A package has a name and contains classes, interfaces, enums, and datatypes.\n   Package The package is defined at the beginning of the file with the following\n package test.hello   The name is somehow important because it defines the namespace of all containing elements. For this package a Class ClassA would have the full qualified name test.hello.ClassA When using this class e.g. inside a G+[] create statement. Either the full qualified name has to be specified or a import statement imports the Class to be referenced by the simple class name.\n import test.hello.ClassB ... G+[test.hello.ClassA] G+[ClassB]   Wildcard imports are also possible. A import test.hello.* would import all elements inside this package.\n   Class A class is defined with:\n class ClassName { }   Attribute Classes can contain attributes that hold values. As example we define an attribute of type String with the name desc\n desc : String   After the type a multiplicity can be set. For the example here we define a multi-valued attribute of the type String. See the multiplicity chapter for detailed information.\n desc : String []   A optional default value can also be defined.\n desc : String = \u0026#34;hello\u0026#34;    Reference A reference defines a relationship between classifiers. It is defined with\n ClassifierName : referenceName   After the ClassifierName a multiplicity can be defined. See the multiplicity chapter for detailed information.\n ClassifierName [2..*] : referenceName   If you want to define a bi-directional reference that is navigable in both direction you can use the keyword opposite.\n ClassifierName : referenceName opposite otherReferenceName    Operation A operation can be defined to specify behavior of a class. Inside the body of the operation you can use the DC43Code syntax.\n op operationName() { // body of the operation }   Between the () brackets parameters can be defined the same as attributes\n op operationName(par1 : String, par2 : Double [*]) { }   The return type is defined after the () brackets. If non is given it is assumed that no return type is defined (void).\n op operationName() : String { return \u0026#34;hello\u0026#34; }    Equations Mathematical Equations can be defined inside a equation block.\n equations { attr1 == attr2 + 2 }   TODO write more here\n attr1 == attr2 + 2 activeIf attr3 \u0026gt; 3    Conditions Conditions for a class can be specified inside a conditions block. These conditions are checked in a validation step.\n conditions { attr1 \u0026gt; 0 }   Optionally you can specify a message that is shown if the condition is evaluated to false instead of a standard message.\n conditions { attr1 \u0026gt; 0 message = \u0026#34;The attribute attr1 must be greater than zero\u0026#34; }    Multiplicity A multiplicity is defined between [] brackets. It can define the multiplicity of attributes, references and parameters. No multiplicity defined is the same as a [0..1] multiplicity. So the single-value can be either not set or set. A [] multiplicity is the short-hand for [0..] or []. This defines a multi-value which can hold any amount of values. Furthermore you can also specify the lower or upper bound. E.g. [2..4], the only valid amount of values would be between 2 and 4.\n  Derived Attributes A derived attribute is not stored instead it is calculated. E.g.\n derived lastName : String get { val index = name.lastIndexOf(\u0026#39; \u0026#39;) return if (index != -1) name.substring(index + 1) else name }      Interface For an interface everything stated for class also applies. Though you can’t create nodes of interfaces.\n   Enum A enum is short for Enumeration and is defined with\n enum EnumName { }   The enum literals are recommended to be defined with uppercase.\n enum Cardsuit { CLUBS, DIAMONDS, SPADES, HEARTS }   If an attribute of the type Cardsuit is defined, only these literals can be assigned to it.\n   Library example package test class Library { name : String = \u0026#34;Test\u0026#34; pages : Integer Book bestBook Book[10..*] books opposite library op getBook(title:String) : Book { for (Book book : books){ if (title == book.title) return book } return null } // same behavior as getBook but more compact op getBook2(searchTitle:String) : Book { return books.findFirst[title == searchTitle] } } class Book { height : Unit[mm] width : Unit[mm] copyright : Date Library library opposite books equations { height == 2 + library.pages } conditions { height \u0026gt; 4 } } enum BookCategory { MYSTERY SCIENCE_FICTION BIOGRAPHY } // makes the java type java.util.Date available type Date wraps java.util.Date     Advanced Names If a name should be the same as some reserved keyword, you can escape the name with a ^. E.g. if a attribute should be named id:\n ^id : String    Enum literals If you want to specify the integer values for the enum:\n enum BookCategory { Mystery = 0 ScienceFiction = 1 Biography = 2 }   If you want to specify the literal values for the enum:\n enum BookCategory { Mystery as \u0026#34;M\u0026#34; ScienceFiction as \u0026#34;S\u0026#34; Biography as \u0026#34;B\u0026#34; }   If you want to specify both the integer value and the literal values for the enum:\n enum BookCategory { Mystery as \u0026#34;M\u0026#34; = 0 ScienceFiction as \u0026#34;S\u0026#34; = 1 Biography as \u0026#34;B\u0026#34; = 2 }    Datatype You can use any Java Class as attribute type after importing it with following syntax.\n type Date wraps java.util.Date   If a graph is saved it must be serialized so it must be defined how this happens. If you don’t need the attribute to be serialized you can specifiy the \u0026#39;transient\u0026#39; keyword before the attribute. Otherwise you need to specify the create and convert methods.\n type Date wraps java.util.Date create { try { if (it != null) new SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;).parse(it) } catch (ParserException ex) { throw new RuntimeException(ex) } } convert { if(it != null) new SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;).format(it) }      "
},
{
	"uri": "https://parnold-x.github.io/docTest/about/what-is-dc43/",
	"title": "What Is DC43?",
	"tags": [],
	"description": "",
	"content": " DC43 is an leading engineering automation framework\nDC43 allows organizations an effortless transition to public cloud and Cloud-Native architecture by enabling them to automate their existing infrastructure alongside cloud native and distributed edge resources. DC43 also allows users to manage different orchestration and automation domains as part of one common CI/CD pipeline.\nKey Features Everything as a Code "
},
{
	"uri": "https://parnold-x.github.io/docTest/atest/smoketest/",
	"title": "AsciiDoc SmokeTest",
	"tags": [],
	"description": "",
	"content": "Dan Allen \u0026lt;thedoc@asciidoctor.org\u0026gt;\n   emoji :plus: :spade:\n  html +\n   This is a demonstration of asciidoctor-ruby. And this is the preamble of this document.\n Purpose This document exercises many of the features of AsciiDoc to test the asciidoctor-ruby implementation.\n       If you want the output to look familiar, copy (or link) the AsciiDoc stylesheet, asciidoc.css, to the output directory.         Items marked with TODO are either not yet supported or a work in progress.       First Steps with AsciiDoc Inline markup   single quotes around a phrase place \u0026#39;emphasis\u0026#39;\n  astericks around a phrase make the text bold\n  double astericks around one or more letters in a word make those letters bold\n  double underscore around a substring in a word emphasize that substring\n  use carrots around characters to make them superscript\n  use tildes around characters to make them subscript\n  to pass through HTML directly, surround the text with triple plus\n     characters can be escaped using a \\\n  for instance, you can escape a quote inside emphasized text like \u0026#39;Here\u0026#39;s Johnny!\u0026#39;\n     you can safely use reserved XML characters like \u0026lt;, \u0026gt; and \u0026amp;, which are escaped when rendering\n  force a space between inline elements using the {sp} attribute\n  hold text together with an intrinsic non-breaking space attribute, {nbsp}\n  handle words with unicode characters like in the name Gregory Romé\n  claim your copyright ©, registered trademark ® or trademark ™\n   You can write text with inline links, optionally using an explicit link prefix. In either case, the link can have a query string.\n If you want to break a line just end it in a + sign and continue typing on the next line.\n Lists Upon Lists Adjacent lists   this list\n  should join\n  to have\n  four items\n   Numbered lists  These items\n  will be auto-numbered\n and can be nested\n     A numbered list can nest\n  unordered\n  list\n  items\n      Statement I swear I left it in \u0026#39;Guy\u0026#39;s\u0026#39; car. Let\u0026#39;s go look for it.\n  term  definition line two\n another term  another definition, which can be literal (indented) or regular paragraph\n   This should be a standalone paragraph, not grabbed by the definition list.\n   first level written on two lines\n  first level\nwith this literal text     second level\n  third level\n  fourth level\n           back to first level\n   Let’s make a horizontal rule…​\n  then take a break.\n    We’re back! Want to see a ?\n Do you feel safer with the tiger in a box?\n  Hugo in a box  Start of include::include.asciidoc.adoc[]\n   include::include.asciidoc.adoc[]\n End of include::include.asciidoc.adoc[]\n   Asciidoctor usage example, should contain 3 lines doc = Asciidoctor::Document.new(\u0026#34;*This* is it!\u0026#34;, :header_footer =\u0026gt; false) puts doc.render   Here’s what it outputs (using the built-in templates):\n \u0026lt;div class=\u0026#34;paragraph\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;This\u0026lt;/strong\u0026gt; is it!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   ``Quotes\u0026#39;\u0026#39;  AsciiDoc is \u0026#39;so\u0026#39; powerful!\n   This verse comes to mind.\n La la la  Here’s another quote:\n  When you have eliminated all which is impossible, then whatever remains, however improbable, must be the truth.\n  — Sir Arthur Conan Doyle The Adventures of Sherlock Holmes    Getting Literal Want to get literal? Just prefix a line with a space (just one will do).   I\u0026#39;ll join that party, too.   We forgot to mention in Numbered lists that you can change the numbering style.\n  first item (yeah!)\n  second item, looking so mono\n  third item, mono it is!\n   That was literal\n  Passthrough block  Passthrough means pure HTML Ghost from this codepen div#svg-animation-container { background-color: #ff4814; } .ghost { animation: float 3s ease-out infinite; } @keyframes float { 50% { transform: translate(0, 20px); } } .shadowFrame { width: 130px; margin-top: 15px; } .shadow { animation: shrink 3s ease-out infinite; transform-origin: center center; } .shadow ellipse { transform-origin: center center; } @keyframes shrink { 0% { width: 90%; margin: 0 5%; } 50% { width: 60%; margin: 0 18%; } 100% { width: 90%; margin: 0 5%; } }              \n    Wrap-up     AsciiDoc is quite cool, you should try it!     Here’s a reference to the definition of another term, in case you forgot it.\n     One more thing. Happy documenting!     When all else fails, head over to http://google.com.\n   "
},
{
	"uri": "https://parnold-x.github.io/docTest/about/doc-info/",
	"title": "How this Document is Organized",
	"tags": [],
	"description": "",
	"content": "The documentation center has been designed to assist you to easily navigate to the information that you require.\nDocumentation for DC43 Core Products:\nA table of contents for the entire Documentation Center appears on the left of all pages in the site. You can use the table of contents to drill down into a document to the content that you require.\n"
},
{
	"uri": "https://parnold-x.github.io/docTest/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "© IILS mbH document.write(new Date().getFullYear()), All Rights Reserved.\n"
},
{
	"uri": "https://parnold-x.github.io/docTest/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "\n"
},
{
	"uri": "https://parnold-x.github.io/docTest/atest/include.asciidoc/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "    Optional Title This is an example single-paragraph note.         Optional Title This is an example single-paragraph note.         Tip.         Important.         Warning.         Caution.     Optional Title *Listing* Block Use: code or file listings   Optional Title Sidebar Block\n Use: sidebar notes :)\n   Example 1. Optional Title Example Block\n Use: examples :)\n Default caption \u0026#34;Example:\u0026#34; can be changed using\n [caption=\u0026#34;Custom: \u0026#34;]   before example block.\n       Optional Title NOTE Block\n Use: multi-paragraph notes.\n     Optional Title *Literal* Block Use: workaround when literal paragraph (indented) like 1. First. 2. Second. incorrectly processed as list.   Optional Title  Quote Block\n Use: cite somebody\n  — cite author cite source   Text normal, italic, bold, mono.\n ``double quoted\u0026#39;\u0026#39;, `single quoted\u0026#39;.\n normal, super, sub.\n Command: ls -al\n mono *bold*\n passthru bold\n Path: \u0026#39;/some/filez.txt\u0026#39;, \u0026#39;.b\u0026#39;\n red text on yellow large all bold\n colors aqua aqua-background black black-background blue blue-background fuchsia fuchsia-background gray gray-background green green-background lime lime-background maroon maroon-background navy navy-background olive olive-background purple purple-background red red-background silver silver-background teal teal-background white white-background yellow yellow-background\n Chars: nibmr\n Escaped: _italic_, _italic_, t__e__st, t__e__st, bold, \u0026lt;b\u0026gt;normal\u0026lt;/b\u0026gt; \u0026amp;#182; `not single quoted\u0026#39; \\`\\`not double quoted\u0026#39;\u0026#39;\n   Images First home  , second home  .\n  Block image    Thumbnail linked to full image \n   Lists Bulleted   bullet\n  bullet\n  bullet\n  bullet\n     bullet\n  bullet\n  bullet\n  bullet\n  bullet\n  bullet\n  bullet\n  bullet\n  bullet\n     bullet\n     bullet\n     bullet\n     bullet\n   Bulleted 2   bullet\n  bullet\n      Ordered  number\n  number\n letter\n  letter\n     number\n loweralpha\n  loweralpha\n lowerroman\n  lowerroman\n upperalpha\n  upperalpha\n upperroman\n  upperroman\n     upperalpha\n     lowerroman\n     loweralpha\n     number\n   Ordered 2  letter\n  letter\n letter2\n  letter2\n number\n  number\n number2\n  number2\n  number2\n  number2\n     number\n     letter2\n     letter\n   Labeled  Term 1  Definition 1\n Term 2  Definition 2\n Term 2.1  Definition 2.1\n Term 2.2  Definition 2.2\n    Term 3  Definition 3\n Term 4  Definition 4\n Term 4.1  Definition 4.1\n Term 4.2  Definition 4.2\n Term 4.2.1  Definition 4.2.1\n Term 4.2.2  Definition 4.2.2\n    Term 4.3  Definition 4.3\n    Term 5  Definition 5\n   Labeled 2  Term 1  Definition 1\n Term 1.1  Definition 1.1\n      Labeled horizontal   Term 1  Definition 1\n   Term 2  Definition 2\n      Term 2.1  Definition 2.1\n   Term 2.2  Definition 2.2\n Term 3  Definition 3\n Term 4  Definition 4\n         Term 4.1  Definition 4.1\n   Term 4.2  Definition 4.2\n      Term 4.2.1  Definition 4.2.1\n   Term 4.2.2  Definition 4.2.2\n Term 4.3  Definition 4.3\n Term 5  Definition 5\n          Q\u0026amp;A   Question 1\nAnswer 1\n  Question 2\nAnswer 2\n   Indent is optional   bullet\n  another bullet\n number\n again number\n letter\n again letter\n  letter\n        number\n        bullet\n     bullet\n   Break two lists  number\n  number\n   Independent paragraph break list.\n  number\n   Header break list too  number\n    List block define list boundary too\n  number\n  number\n      number\n  number\n     Continuation   bullet continuation\n number continuation\n  bullet\nliteral continuation    letter\nNon-literal continuation.\n any block can be included in list   Last continuation.\n             List block allow sublist inclusion   bullet\n  bullet\n  bullet\n  bullet\n          bullet\n     bullet\n number\n letter\n number\n letter\n          letter\n     number\n      Table 1. An example table     Col 1 Col 2 Col 3     1\n Item 1\n a\n   2\n Item 2\n b\n   3\n Item 3\n c\n     6\n Three items\n d\n    Table 2. CSV data, 15% each column     1\n 2\n 3\n 4\n   a\n b\n c\n d\n   A\n B\n C\n D\n        ID FName LName Address Phone     1\n Vasya\n Pupkin\n London\n +123\n   2\n X\n Y\n A,B\n 45678\n    Table 3. Multiline cells, row/col span     Date Duration Avg HR Notes     22-Aug-08\n 10:24\n 157\n Worked out MSHR (max sustainable heart rate) by going hard for this interval.\n   22-Aug-08\n 152\n Back-to-back with previous interval.\n   24-Aug-08\n none\n      "
},
{
	"uri": "https://parnold-x.github.io/docTest/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://parnold-x.github.io/docTest/",
	"title": "DC43 Documentation Center",
	"tags": [],
	"description": "Where the DC43 documentation LIVES!",
	"content": " About DC43 DC43 is an leading design automation framework. which enables you to model applications and services and automate their entire life cycle\n  A Test this is a test\n  Doc This is a category with the classes\n  "
},
{
	"uri": "https://parnold-x.github.io/docTest/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]